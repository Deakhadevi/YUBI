// sync and async behaviour of Javascript 

//In Javascript ,almost everything is object ,excluding symbols,undefined,null and boolean. 

// In javascript. functions are called as first class objects.
// In javascript functions can be stored in variable, or can be passed as an argument to any othe rfunctions.
// In javascript evrything happens in a global execution context .
// In javascript the global execution context makes a global or window object/function ,which
//  runs on callstack.
//Javascript is a synchorunous and single thread language;
// single thread : it can only perform a single at a time;
//synchorunous : line by line 

//functions types
 //named function  
//  function fun(){

//  }
//  fun()

// anonymous funtion = functions with no name
//functional expression : functiona with no name of itself , when stored with help of something;

// let a =function(a,b){
//    return a+b
// }
// console.log(a(2,3))

//arrow function
// .addeventlistenr('click',()=>{

// })
// let a =(a,b)=>{
//     return a+b;
// }
// console.log(a(1,2));

//IIFE => immediately innoved functional expression

// callbacks
//it is a function which is given to another function as an argument and executed inside the other funtion.


function fun(a,b,callback){
    return callback(a,b)
}

function add(a,b){
    return a+b;
}
let a =fun(2,3,add);
console.log(a);

//addeventlistener('click',()=>{

// })

// States of promises :
//value is fulfillled => resolve;
// value is not fulfilled => reject ;
// searching value => pending ;


function add (a,b){
    return new Promise((resolve,reject)=>{
       let c=a+b;
       if(c>5){
        resolve(c)
       }else{
        reject("error:")
       }
    })
}
// .then and .catch
//. then (()=>{it hanldes resolved data})
//.catch(()=>{it handles rejected data})
add(4,2).then((data)=>console.log(data,"resolved data")).catch((err)=>console.log(err,"reject data"))

// async -await;
(
    async()=>{
        try {
            let data  =await add(2,4)
            console.log(data);
        } catch (error) {
            console.log(error);
        }
                   
}

)()



console.log("end")